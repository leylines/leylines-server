'use strict';

exports.createGrid = function(req, res, connectionString, callback) {

	var grid   = require('./createGrid');
	var czml   = require('./createCzml');
	var math   = require('./Math');
	var solids = require('./platonicSolids');
    var grids  = require('./grids.js');
    var geometry = require('./createGeometry');
    var postgis = require('./postGIS');

    var async  = require('async');

	var czmlfile = [];
	var rowdetails = [];

    var lat = req.params.lat1;
    var lon = req.params.lon1;
	var azi = -math.radians(req.params.azi);

    var shape = req.params.shape;
    var type = req.params.type;

    var colorMain  = [255,255,66];
    var colorMinor = [255,165,0];
    var distanceMain   = 60000.0;
    var distanceMinor  = 30000.0;

	czml.createHeader(czmlfile);
	rowdetails = solids.calculateGridPoints(lat, lon, azi, shape, type, czmlfile);

    switch (type) {
       case "points":
          async.waterfall([
             geometry.createPoints(rowdetails, 1, czmlfile)
          ], function(err, czmlfile){
             callback(err, czmlfile);
          });
          return;
       case "area":
          async.waterfall([
             czmlfile = geometry.createPoints(rowdetails, 0, czmlfile),
             czmlfile = geometry.createArea(grids.area + shape, czmlfile)
          ], function(err, czmlfile){
             callback(err, czmlfile);
          });
          return;
       case "1":
          async.waterfall([
             geometry.createCorridor(connectionString, rowdetails, grids.main + shape, distanceMain, colorMain, czmlfile),
             postgis.pgFindPOI,
          ], function(err, czmlfile){
             callback(err, czmlfile);
          });
          return;
       case "2":
          async.waterfall([
             geometry.createCorridor(connectionString, data, grids.minor + shape, distanceMinor, colorMinor, czmlfile),
             postgis.pgFindPOI,
          ], function(err, czmlfile){
             callback(err, czmlfile);
          });
          return;
    }
	callback(err, results);

};

exports.createPOI = function(req, res, connectionString, callback) {

	var czml = require('./createCzml');
	var postgis = require('./postGIS');

	var maintable = req.params.schema + "." + req.params.table;

	var select = "SELECT " + maintable + ".site," + maintable + ".description," + maintable + ".type," + maintable + ".sub_type," + maintable + ".data_owner," + maintable + ".links," + maintable + ".importance," + maintable + ".x_coord," + maintable + ".y_coord," + maintable + ".z_coord," + maintable + ".country" + " FROM "  + maintable  + " WHERE " + maintable + ".type = '" + req.params.type + "';";

	var scale = 0.2;

	var czmlfile = [];

	// Print Header
	czmlfile = czml.createHeader(czmlfile);

	postgis.pgCreatePoint(connectionString, select, req.params.type, scale, czmlfile, function(err, results) {
		callback(err, results);
	});
};

exports.createLine = function(req, res, connectionString) {

	var czml = require('./createCzml');
	var postgis = require('./postGIS');

	var maintable = req.params.schema + "." + req.params.table;
	var linewidth = req.params.width;
	var color = req.params.color.split(",");

	var czmlfile  = [];

	// Print Header
	czml.createHeader(czmlfile);

        postgis.pgCreateLine(connectionString, maintable, linewidth, color, czmlfile, function(results) {
		return res.json(results);
	});
};

exports.createArea = function(req, res, connectionString) {

	var czml = require('./createCzml.js');
	var postgis = require('./postGIS');

	var czmlfile = [];

	var maintable = req.params.schema + "." + req.params.table;
        var color = [255,178,102,100];
        var extrudeheight = 10000;

	// Print Header
	czml.createHeader(czmlfile);

	postgis.pgCreateArea(connectionString, maintable, req.params.name, color, extrudeheight, czmlfile, function(results) {
		return res.json(results);
	});
};

exports.createGridLines = function(req, res) {

	var grid   = require('./createGrid');
	var czml   = require('./createCzml');
	var math   = require('./Math');
        var solids = require('./platonicSolids');

	var results = [];
	var rowdetails = [];

	var azi = -math.radians(req.params.azi);

	czml.createHeader(results);
	rowdetails = solids.calculateGridPoints(req.params.lat1, req.params.lon1, azi, req.params.shape, req.params.type);
	grid.createLinesLevel1(rowdetails, req.params.type, results); 

	return res.json(results);
};

exports.createGridPoints = function(req, res) {

	var grid   = require('./createGrid');
	var czml   = require('./createCzml');
	var math   = require('./Math');
    var solids = require('./platonicSolids');

	var results = [];
	var rowdetails = [];

	var azi = -math.radians(req.params.azi);

	czml.createHeader(results);
	rowdetails = solids.calculateGridPoints(req.params.lat1, req.params.lon1, azi, req.params.shape, req.params.type);
	grid.createPoints(rowdetails, results); 

	return res.json(results);
};

exports.createGridAreas = function(req, res, connectionString) {

	var pg = require('pg');
	var czml = require('./createCzml.js');
	var results = [];

	// Print Header
	results = czml.createHeader(results);

	// Get a Postgres client from the connection pool
	pg.connect(connectionString, function(err, client, done) {

		var maintable = req.params.schema + "." + req.params.table;
		var typetable = "object_types";
		var subtypetable = "object_sub_types";
		//var pointcoords = [];

		// SQL Query > Select Data
		var querystatement = "SELECT " + maintable + ".gid,";
		querystatement += maintable + ".site,";
		querystatement += maintable + ".description,";
		querystatement += maintable + ".x_coord,";
		querystatement += maintable + ".y_coord,";
		querystatement += maintable + ".z_coord,";
		querystatement += maintable + ".country";
		querystatement += " FROM ";
		querystatement += maintable;
		querystatement += ";";
		//console.log(querystatement);
		var query = client.query(querystatement);

		// Stream results back one row at a time
		query.on('row', function(row) {
			var icon = "";
			if (!row.description) {
				row.description = row.site;
			}
			if (row.description == 'Female') {
				icon = "/images/icons/button_blue.png";
			} else if (row.description == 'Male') {
				icon = "/images/icons/button_red.png";
			} else {
				icon = "/images/icons/button_green.png";
			}
			var scale = 0.2;
			var description = "<!--HTML-->\r\n<p>\r\n";
			description += row.description;
			description += "\r\n</p>";
			results = czml.createPoint(row.gid, row.site, description, icon, scale, row.x_coord, row.y_coord, row.z_coord, results);
		});

		// After all data is returned, close connection and return results
		query.on('end', function() {
			client.end();

			var polygon = [];
			var polygonid;
			var color = [];
			var extrudeheight = 10000;
			var polygonreference = [];

			// Africa
			color = [0, 255, 0, 64];

			polygon = [20, 51, 59];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [38, 43, 32];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [51, 43, 28];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [24, 43, 59];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			color = [153, 255, 153, 64];

			polygon = [38, 31, 32];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [43, 32, 28];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [51, 43, 59];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [24, 38, 43];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);


			// Asia
			color = [153, 51, 255, 64];

			polygon = [44, 42, 27];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [42, 50, 58];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [32, 28, 42];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [31, 32, 44];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			color = [204, 153, 255, 64];

			polygon = [50, 58, 22];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [42, 27, 58];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [28, 42, 50];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [32, 44, 42];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			// Antlantis
			color = [255, 128, 0, 64];

			polygon = [26, 61, 36];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [54, 46, 38];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [36, 54, 24];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [61, 23, 54];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			color = [255, 178, 102, 64];

			polygon = [46, 38, 31];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [54, 24, 38];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [61, 36, 54];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [23, 54, 46];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			// North America
			color = [0, 0, 255, 64];

			polygon = [31, 46, 52];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [52, 34, 21];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [23, 34, 46];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [53, 34, 49];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			color = [102, 102, 255, 64];

			polygon = [29, 53, 49];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [34, 46, 52];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [23, 53, 34];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [49, 34, 21];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			// North Pole
			color = [255, 255, 255, 64];

			polygon = [37, 25, 57];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [44, 52, 60];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [57, 21, 60];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [27, 60, 37];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			color = [192, 192, 192, 64];

			polygon = [31, 44, 52];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [52, 60, 21];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [60, 37, 57];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [44, 27, 60];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			// South Pole
			color = [255, 255, 255, 64];

			polygon = [40, 48, 30];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [59, 36, 56];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [20, 48, 56];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [26, 40, 56];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			color = [192, 192, 192, 64];

			polygon = [24, 36, 59];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [20, 59, 56];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [40, 48, 56];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [26, 36, 56];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			// Indian Ocean
			color = [0, 0, 255, 64];

			polygon = [47, 48, 30];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [51, 50, 35];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [22, 47, 35];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [20, 48, 35];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			color = [102, 102, 255, 64];

			polygon = [51, 50, 28];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [22, 50, 35];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [47, 48, 35];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [20, 51, 35];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			// Pilippine Sea
			color = [255, 128, 0, 64];

			polygon = [47, 39, 30];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [58, 37, 55];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [55, 25, 39];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [22, 55, 47];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			color = [255, 178, 102, 64];

			polygon = [27, 58, 37];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [37, 55, 25];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [55, 47, 39];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [58, 22, 55];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			//
			color = [153, 51, 255, 64];

			polygon = [30, 33, 40];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [45, 53, 61];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [40, 45, 26];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [33, 29, 45];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			color = [204, 153, 255, 64];

			polygon = [53, 61, 23];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [45, 26, 61];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [33, 40, 45];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [29, 45, 53];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			//
			color = [0, 255, 0, 64];

			polygon = [39, 30, 33];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [57, 41, 49];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [41, 33, 29];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [25, 39, 41];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			color = [153, 255, 153, 64];

			polygon = [49, 57, 21];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [41, 29, 49];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [39, 41, 33];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			polygon = [25, 57, 41];
			polygonreference = czml.createPolygonReference(polygon);
			polygonid = polygon.join("-");
			results = czml.createPolygon(polygonid, polygonid, polygonid, color, extrudeheight, polygonreference, results);

			return res.json(results);
		});

		// Handle Errors
		if(err) {
			console.log(err);
		}
	});
};

exports.createMegalithic = function(req, res, connectionString) {

	var pg = require('pg');
	var czml = require('./createCzml.js');
	var results = [];

	// Print Header
	results = czml.createHeader(results);

	// Get a Postgres client from the connection pool
	pg.connect(connectionString, function(err, client, done) {

		// SQL Query > Select Data
		var querystatement = "SELECT sid, object_type, place, x_coord, y_coord, icon, country FROM megalithic.sites";
		querystatement += " WHERE type_id = '";
		querystatement += req.params.type;
		querystatement += "';";
		var query = client.query(querystatement);

		// Stream results back one row at a time
		query.on('row', function(row) {
			var description = "<!--HTML-->\r\n";
			description += "<table>";
			description += "<tr><td width=\"120px\">Country</td><td width=\"50px\"></td><td>" + row.country + "</td></tr>";
			description += "<tr><td>Type</td><td><img src=\"/images/megalithic/" + row.icon + ".gif\"><td>" + row.object_type + "</td></tr>";
			description += "<tr><td>Data Custodian</td><td></td><td><a href=\"http://www.megalithic.co.uk/article.php?sid=" + row.sid + "\" target=\"_blank\">megalithic.co.uk</a></td></tr>";
			description += "</table>";
			description += "\r\n</p>";
			var icon = "/images/megalithic/" + row.icon + ".gif";
			var scale = 0.7;
			results = czml.createPoint(row.sid, row.place, description, icon, scale, row.x_coord, row.y_coord, 0.0, results);
		});

		// After all data is returned, close connection and return results
		query.on('end', function() {
			client.end();
			return res.json(results);
		});

		// Handle Errors
		if(err) {
			console.log(err);
		}
	});
};

exports.createSite = function(req, res, connectionString) {

	var pg = require('pg');
	var czml = require('./createCzml');
        var utils = require('./utils')
	var results = [];

	// Print Header
	results = czml.createHeader(results);

	// Get a Postgres client from the connection pool
	pg.connect(connectionString, function(err, client, done) {

		var maintable = req.params.schema + "." + req.params.table;

		// SQL Query > Select Data
		var querystatement = "SELECT " + maintable + ".site,";
		querystatement += maintable + ".description,";
		querystatement += maintable + ".type,";
		querystatement += maintable + ".sub_type,";
		querystatement += maintable + ".data_owner,";
		querystatement += maintable + ".links,";
		querystatement += maintable + ".importance,";
		querystatement += maintable + ".x_coord,";
		querystatement += maintable + ".y_coord,";
		querystatement += maintable + ".z_coord,";
		querystatement += maintable + ".country";
		querystatement += " FROM "  + maintable  + " WHERE ";
		querystatement += maintable + ".type = \'";
		querystatement += req.params.type;
		querystatement += "\';";
		// console.log(querystatement);
		var query = client.query(querystatement);
		var id = 1;

		// Stream results back one row at a time
		query.on('row', function(row) {
			if (!row.description) {
				row.description = row.site;
			}
			var wikipedialink = "<a href=\"https://en.wikipedia.org/wiki/" + row.site.replace(/ /g, "_") + "\">" + row.site + "</a>";
			var links = "<a href=\"" + row.links + "\">" + row.links + "</a>";
			var icon = "/images/" + req.params.icon;
			var scale = 0.2;
			var description = "<!--HTML-->";
			var image = "/popup/" + row.site.replace(/ /g, "_") + ".jpg";
			description += "<table>";
			if (utils.fileExists(image)) {
				description += "<tr><td colspan=\"2\"><img src=\"/images" +  image + "\" alt=\"" + row.site + "\" style=\"width:360px\"></td></tr>"; 
			}
			description += "<tr><td style=\"width: 360px; padding: 4px\" colspan=\"2\">" + row.description + "</td></tr>";
			if (row.type != "unknown") {
				description += "<tr><td style=\"width: 120px; padding: 4px\">Type:</td><td style=\"width: 240px\">" + row.type + "</td></tr>";
			}
			if (row.sub_type != "unknown") {
				description += "<tr><td style=\"width: 120px; padding: 4px\">Subtype:</td><td style=\"width: 240px\">" + row.sub_type + "</td></tr>";
			}
			description += "<tr><td style=\"width: 120px; padding: 4px\">Wikipedia:</td><td style=\"width: 240px\">" + wikipedialink + "</td></tr>";
			if (row.importance != "local") {
				description += "<tr><td style=\"width: 120px; padding: 4px\">Importance:</td><td style=\"width: 240px\">" + row.importance + "</td></tr>";
			}
			if (row.data_owner) {
				description += "<tr><td style=\"width: 120px; padding: 4px\">Custodian:</td><td style=\"width: 240px\">" + row.data_owner + "</td></tr>";
			}
			if (row.links) {
				description += "<tr><td style=\"width: 120px; padding: 4px\">Links:</td><td style=\"width: 240px\">" + links + "</td></tr>";
			}
			if (row.country) {
				description += "<tr><td style=\"width: 120px; padding: 4px\">Country:</td><td style=\"width: 240px\">" + row.country + "</td></tr>";
			}
			description += "</table>";
			results = czml.createPoint(id, row.site, description, icon, scale, row.x_coord, row.y_coord, row.z_coord, results);
			id++;
		});

		// After all data is returned, close connection and return results
		query.on('end', function() {
			client.end();
			return res.json(results);
		});

		// Handle Errors
		if(err) {
			console.log(err);
		}
	});
};

exports.createPole = function(req, res, connectionString) {

	var pg = require('pg');
	var czml = require('./createCzml.js');
	var results = [];

	// Print Header
	results = czml.createHeader(results);

	// Get a Postgres client from the connection pool
	pg.connect(connectionString, function(err, client, done) {

		// SQL Query > Select Data
		var querystatement = "SELECT year, x_coord, y_coord, z_coord, country FROM environment.";
		querystatement += req.params.table;
		querystatement += " ;";
		var query = client.query(querystatement);
		var id = 1;

		// Stream results back one row at a time
		query.on('row', function(row) {
			var icon = "/images/icons/button_" + req.params.icon + ".svg";
			var scale = 0.03;
			var description = row.year;
			var site = row.year;
			results = czml.createPoint(id, site, description, icon, scale, row.x_coord, row.y_coord, row.z_coord, results);
			id++;
		});

		// After all data is returned, close connection and return results
		query.on('end', function() {
			client.end();
			return res.json(results);
		});

		// Handle Errors
		if(err) {
			console.log(err);
		}
	});
};
